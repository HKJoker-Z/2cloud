{"ast":null,"code":"import \"core-js/modules/es.array.unshift.js\";\nexport default {\n  data() {\n    return {\n      categoryList: [{\n        \"text\": '全部文件',\n        category: 'all',\n        icon: ''\n      }, {\n        \"text\": '图片',\n        category: 'img',\n        icon: 'el-icon-picture-outline'\n      }, {\n        \"text\": '视频',\n        category: 'video',\n        icon: 'el-icon-video-play'\n      }, {\n        \"text\": '压缩',\n        category: 'zip',\n        icon: 'el-icon-box'\n      }],\n      typeList: [{\n        text: 'mp3',\n        icon: 'el-icon-mp3'\n      }, {\n        text: 'mp4',\n        icon: 'el-icon-mp4'\n      }, {\n        text: 'jpg',\n        icon: 'el-icon-jpg'\n      }, {\n        text: 'jpeg',\n        icon: 'el-icon-jpeg'\n      }, {\n        text: 'png',\n        icon: 'el-icon-png'\n      }, {\n        text: 'pdf',\n        icon: 'el-icon-pdf'\n      }, {\n        text: 'docx',\n        icon: 'el-icon-docx'\n      }, {\n        text: 'txt',\n        icon: 'el-icon-text'\n      }, {\n        text: 'zip',\n        icon: 'el-icon-zip'\n      }, {\n        text: 'folder',\n        icon: 'el-icon-folder'\n      }],\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}')\n    };\n  },\n  mounted() {},\n  // methods：本页面所有的点击事件或者其他函数定义区\n  methods: {\n    openFile(row) {\n      if (row.folder === '是') {\n        //是文件夹\n        location.href = '/front/home?category=' + this.category + '&folderId=' + row.id;\n      } else {\n        //不是文件夹\n        console.log(this.category);\n      }\n    },\n    download(url) {\n      window.open(url); // 文件下载\n    },\n\n    mouseEnter(row) {\n      if (!row.unSave) {\n        this.$set(row, 'optShow', true);\n      }\n    },\n    mouseLeave(row) {\n      if (!row.unSave) {\n        this.$set(row, 'optShow', false);\n      }\n    },\n    rename(row) {\n      this.$set(row, 'unSave', true);\n    },\n    save(row) {\n      // 上传文件夹的方法 和编辑后保存\n      if (row.id) {\n        // 编辑\n        this.$request.put('/diskFiles/update', row).then(res => {\n          if (res.code === '200') {\n            this.$message.success(\"操作成功\");\n            this.load();\n          } else {\n            this.$message.error(res.msg);\n          }\n        });\n      } else {\n        let url = '/diskFiles/add?folder=是&name=' + row.name;\n        if (this.folderId) {\n          // 外层的folderId\n          url += '&folderId=' + this.folderId;\n        }\n        this.$request.post(url).then(res => {\n          if (res.code === '200') {\n            this.$message.success(\"操作成功\");\n            this.load();\n          } else {\n            this.$message.error(res.msg);\n          }\n        });\n      }\n    },\n    cancel(row) {\n      let index = row.$index;\n      if (row.id) {\n        // 编辑\n        this.load(); // 加载最新的数据即可\n      } else {\n        // 新增\n        this.tableData.splice(index, 1);\n      }\n    },\n    addFolder() {\n      this.tableData.unshift({\n        name: '',\n        type: 'folder',\n        unSave: true,\n        folderId: this.folderId || null\n      }); //  unSave 控制输入框是否显示\n    },\n\n    load() {\n      this.$request.get('/diskFiles/selectAll', {\n        params: {\n          category: this.category || null,\n          folderId: this.folderId || null\n        }\n      }).then(res => {\n        this.tableData = res.data || [];\n        this.tableData.forEach(item => {\n          this.$set(item, 'optShow', false); // 强制设置每行  加一个 optShow属性\n        });\n      });\n\n      this.$request.get('/diskFiles/selectFolders', {\n        params: {\n          folderId: this.folderId || null\n        }\n      }).then(res => {\n        this.folders = res.data || [];\n      });\n    },\n    handleFileSuccess(res) {\n      if (res.code === '200') {\n        this.$message.success(\"上传成功\");\n        this.load();\n      } else {\n        this.$message.error('上传失败');\n      }\n    },\n    del(id) {\n      // 单个删除\n      this.$confirm('您确定删除吗？', '确认删除', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/diskFiles/trash/' + id).then(res => {\n          if (res.code === '200') {\n            // 表示操作成功\n            this.$message.success('操作成功');\n            this.load();\n          } else {\n            this.$message.error(res.msg); // 弹出错误的信息\n          }\n        });\n      }).catch(() => {});\n    },\n    handleSelectionChange(rows) {\n      // 当前选中的所有的行数据\n      this.ids = rows.map(v => v.id); //  [1,2]\n    },\n\n    delBatch() {\n      // 批量删除\n      if (!this.ids.length) {\n        this.$message.warning('请选择数据');\n        return;\n      }\n      this.$confirm('您确定批量删除这些数据吗？', '确认删除', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/diskFiles/trash/batch', {\n          data: this.ids\n        }).then(res => {\n          if (res.code === '200') {\n            // 表示操作成功\n            this.$message.success('操作成功');\n            this.load();\n          } else {\n            this.$message.error(res.msg); // 弹出错误的信息\n          }\n        });\n      }).catch(() => {});\n    }\n  }\n};","map":{"version":3,"names":["data","categoryList","category","icon","typeList","text","user","JSON","parse","localStorage","getItem","mounted","methods","openFile","row","folder","location","href","id","console","log","download","url","window","open","mouseEnter","unSave","$set","mouseLeave","rename","save","$request","put","then","res","code","$message","success","load","error","msg","name","folderId","post","cancel","index","$index","tableData","splice","addFolder","unshift","type","get","params","forEach","item","folders","handleFileSuccess","del","$confirm","response","delete","catch","handleSelectionChange","rows","ids","map","v","delBatch","length","warning"],"sources":["src/views/front/Home.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div style=\"display: flex; color: #666\">\r\n      <div style=\"width: 200px;  text-align: center; border-right: 1px solid #ddd; min-height: calc(100vh - 86px);\">\r\n<!--        第一部分-->\r\n          <div style=\"padding: 10px 0;\">\r\n            <div class=\"category\" style=\"padding: 10px 0\" v-for=\"item in categoryList\" :key=\"item.text\" :class=\"{ 'category-active' : category === item.category}\">\r\n            <i v-if=\"item.icon\" :class=\"item.icon\" style=\"margin-right: 5px\"></i>\r\n            <span>{{ item.text }}</span>\r\n          </div>\r\n        </div>\r\n<!--        第二部分-->\r\n        <div style=\"border-top: 1px solid #ddd; text-align: center; padding-top: 10px\" >\r\n          <div style=\"padding: 10px 0; display: flex; justify-content: center\" class=\"category\" :class=\"{ 'category-active' : category === 'share'}\">\r\n            <div style=\"width: 75px; text-align: left\">\r\n              <i class=\"el-icon-share\" style=\"margin-right: 5px\"></i>\r\n              <span>我的分享</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div style=\"padding: 10px 0; display: flex; justify-content: center\" class=\"category\" :class=\"{ 'category-active' : category === 'trash'}\">\r\n            <div style=\"width: 75px; text-align: left\">\r\n              <i class=\"el-icon-delete\" style=\"margin-right: 5px\"></i>\r\n              <span>回收站</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div style=\"flex: 1\">\r\n\r\n\r\n\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n\r\n  data() {\r\n    return {\r\n      categoryList: [\r\n        {\"text\": '全部文件', category: 'all', icon: ''},\r\n        {\"text\": '图片', category: 'img', icon: 'el-icon-picture-outline'},\r\n        {\"text\": '视频', category: 'video', icon: 'el-icon-video-play'},\r\n        {\"text\": '压缩', category: 'zip', icon: 'el-icon-box'},\r\n      ],\r\n      typeList: [\r\n        { text: 'mp3', icon: 'el-icon-mp3' },\r\n        { text: 'mp4', icon: 'el-icon-mp4' },\r\n        { text: 'jpg', icon: 'el-icon-jpg' },\r\n        { text: 'jpeg', icon: 'el-icon-jpeg' },\r\n        { text: 'png', icon: 'el-icon-png' },\r\n        { text: 'pdf', icon: 'el-icon-pdf' },\r\n        { text: 'docx', icon: 'el-icon-docx' },\r\n        { text: 'txt', icon: 'el-icon-text' },\r\n        { text: 'zip', icon: 'el-icon-zip' },\r\n        { text: 'folder', icon: 'el-icon-folder' },\r\n      ],\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n    }\r\n  },\r\n  mounted() {\r\n\r\n  },\r\n  // methods：本页面所有的点击事件或者其他函数定义区\r\n  methods: {\r\n    openFile(row) {\r\n      if (row.folder === '是'){//是文件夹\r\n        location.href='/front/home?category=' + this.category + '&folderId=' + row.id\r\n      } else {//不是文件夹\r\n        console.log(this.category)\r\n      }\r\n    },\r\n\r\n    download(url) {\r\n      window.open(url)  // 文件下载\r\n    },\r\n    mouseEnter(row) {\r\n      if (!row.unSave) {\r\n        this.$set(row, 'optShow', true)\r\n      }\r\n    },\r\n    mouseLeave(row) {\r\n      if (!row.unSave) {\r\n        this.$set(row, 'optShow', false)\r\n      }\r\n    },\r\n    rename(row) {\r\n      this.$set(row, 'unSave', true)\r\n    },\r\n    save(row) {  // 上传文件夹的方法 和编辑后保存\r\n      if (row.id) {  // 编辑\r\n        this.$request.put('/diskFiles/update', row).then(res => {\r\n          if (res.code === '200') {\r\n            this.$message.success(\"操作成功\")\r\n            this.load()\r\n          } else {\r\n            this.$message.error(res.msg)\r\n          }\r\n        })\r\n      } else {\r\n        let url = '/diskFiles/add?folder=是&name=' + row.name\r\n        if (this.folderId) {  // 外层的folderId\r\n          url += '&folderId=' + this.folderId\r\n        }\r\n        this.$request.post(url).then(res => {\r\n          if (res.code === '200') {\r\n            this.$message.success(\"操作成功\")\r\n            this.load()\r\n          } else {\r\n            this.$message.error(res.msg)\r\n          }\r\n        })\r\n      }\r\n\r\n    },\r\n    cancel(row) {\r\n      let index = row.$index\r\n      if (row.id) {  // 编辑\r\n        this.load() // 加载最新的数据即可\r\n      } else {  // 新增\r\n        this.tableData.splice(index, 1)\r\n      }\r\n\r\n    },\r\n    addFolder() {\r\n      this.tableData.unshift({  name: '', type: 'folder', unSave: true, folderId: this.folderId || null })    //  unSave 控制输入框是否显示\r\n    },\r\n    load() {\r\n      this.$request.get('/diskFiles/selectAll', {\r\n        params: {\r\n          category: this.category || null,\r\n          folderId: this.folderId || null,\r\n        }\r\n      }).then(res => {\r\n        this.tableData = res.data || []\r\n        this.tableData.forEach(item => {\r\n          this.$set(item, 'optShow', false)   // 强制设置每行  加一个 optShow属性\r\n        })\r\n      })\r\n\r\n      this.$request.get('/diskFiles/selectFolders', {\r\n        params: { folderId: this.folderId || null }\r\n      }).then(res => {\r\n        this.folders = res.data || []\r\n\r\n      })\r\n    },\r\n    handleFileSuccess(res) {\r\n      if (res.code === '200') {\r\n        this.$message.success(\"上传成功\")\r\n        this.load()\r\n      } else {\r\n        this.$message.error('上传失败')\r\n      }\r\n    },\r\n    del(id) {   // 单个删除\r\n      this.$confirm('您确定删除吗？', '确认删除', {type: \"warning\"}).then(response => {\r\n        this.$request.delete('/diskFiles/trash/' + id).then(res => {\r\n          if (res.code === '200') {   // 表示操作成功\r\n            this.$message.success('操作成功')\r\n            this.load()\r\n          } else {\r\n            this.$message.error(res.msg)  // 弹出错误的信息\r\n          }\r\n        })\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    handleSelectionChange(rows) {   // 当前选中的所有的行数据\r\n      this.ids = rows.map(v => v.id)   //  [1,2]\r\n    },\r\n    delBatch() {   // 批量删除\r\n      if (!this.ids.length) {\r\n        this.$message.warning('请选择数据')\r\n        return\r\n      }\r\n      this.$confirm('您确定批量删除这些数据吗？', '确认删除', {type: \"warning\"}).then(response => {\r\n        this.$request.delete('/diskFiles/trash/batch', {data: this.ids}).then(res => {\r\n          if (res.code === '200') {   // 表示操作成功\r\n            this.$message.success('操作成功')\r\n            this.load()\r\n          } else {\r\n            this.$message.error(res.msg)  // 弹出错误的信息\r\n          }\r\n        })\r\n      }).catch(() => {\r\n      })\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.category {\r\n  cursor: pointer;\r\n}\r\n.category:hover {\r\n  background-color: #f8f8f8;\r\n  color: #000;\r\n}\r\n.category-active {\r\n  color: #409EFF;\r\n}\r\n</style>"],"mappings":";AAyCA;EAEAA,KAAA;IACA;MACAC,YAAA,GACA;QAAA;QAAAC,QAAA;QAAAC,IAAA;MAAA,GACA;QAAA;QAAAD,QAAA;QAAAC,IAAA;MAAA,GACA;QAAA;QAAAD,QAAA;QAAAC,IAAA;MAAA,GACA;QAAA;QAAAD,QAAA;QAAAC,IAAA;MAAA,EACA;MACAC,QAAA,GACA;QAAAC,IAAA;QAAAF,IAAA;MAAA,GACA;QAAAE,IAAA;QAAAF,IAAA;MAAA,GACA;QAAAE,IAAA;QAAAF,IAAA;MAAA,GACA;QAAAE,IAAA;QAAAF,IAAA;MAAA,GACA;QAAAE,IAAA;QAAAF,IAAA;MAAA,GACA;QAAAE,IAAA;QAAAF,IAAA;MAAA,GACA;QAAAE,IAAA;QAAAF,IAAA;MAAA,GACA;QAAAE,IAAA;QAAAF,IAAA;MAAA,GACA;QAAAE,IAAA;QAAAF,IAAA;MAAA,GACA;QAAAE,IAAA;QAAAF,IAAA;MAAA,EACA;MACAG,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;IACA;EACA;EACAC,QAAA,GAEA;EACA;EACAC,OAAA;IACAC,SAAAC,GAAA;MACA,IAAAA,GAAA,CAAAC,MAAA;QAAA;QACAC,QAAA,CAAAC,IAAA,kCAAAf,QAAA,kBAAAY,GAAA,CAAAI,EAAA;MACA;QAAA;QACAC,OAAA,CAAAC,GAAA,MAAAlB,QAAA;MACA;IACA;IAEAmB,SAAAC,GAAA;MACAC,MAAA,CAAAC,IAAA,CAAAF,GAAA;IACA;;IACAG,WAAAX,GAAA;MACA,KAAAA,GAAA,CAAAY,MAAA;QACA,KAAAC,IAAA,CAAAb,GAAA;MACA;IACA;IACAc,WAAAd,GAAA;MACA,KAAAA,GAAA,CAAAY,MAAA;QACA,KAAAC,IAAA,CAAAb,GAAA;MACA;IACA;IACAe,OAAAf,GAAA;MACA,KAAAa,IAAA,CAAAb,GAAA;IACA;IACAgB,KAAAhB,GAAA;MAAA;MACA,IAAAA,GAAA,CAAAI,EAAA;QAAA;QACA,KAAAa,QAAA,CAAAC,GAAA,sBAAAlB,GAAA,EAAAmB,IAAA,CAAAC,GAAA;UACA,IAAAA,GAAA,CAAAC,IAAA;YACA,KAAAC,QAAA,CAAAC,OAAA;YACA,KAAAC,IAAA;UACA;YACA,KAAAF,QAAA,CAAAG,KAAA,CAAAL,GAAA,CAAAM,GAAA;UACA;QACA;MACA;QACA,IAAAlB,GAAA,qCAAAR,GAAA,CAAA2B,IAAA;QACA,SAAAC,QAAA;UAAA;UACApB,GAAA,wBAAAoB,QAAA;QACA;QACA,KAAAX,QAAA,CAAAY,IAAA,CAAArB,GAAA,EAAAW,IAAA,CAAAC,GAAA;UACA,IAAAA,GAAA,CAAAC,IAAA;YACA,KAAAC,QAAA,CAAAC,OAAA;YACA,KAAAC,IAAA;UACA;YACA,KAAAF,QAAA,CAAAG,KAAA,CAAAL,GAAA,CAAAM,GAAA;UACA;QACA;MACA;IAEA;IACAI,OAAA9B,GAAA;MACA,IAAA+B,KAAA,GAAA/B,GAAA,CAAAgC,MAAA;MACA,IAAAhC,GAAA,CAAAI,EAAA;QAAA;QACA,KAAAoB,IAAA;MACA;QAAA;QACA,KAAAS,SAAA,CAAAC,MAAA,CAAAH,KAAA;MACA;IAEA;IACAI,UAAA;MACA,KAAAF,SAAA,CAAAG,OAAA;QAAAT,IAAA;QAAAU,IAAA;QAAAzB,MAAA;QAAAgB,QAAA,OAAAA,QAAA;MAAA;IACA;;IACAJ,KAAA;MACA,KAAAP,QAAA,CAAAqB,GAAA;QACAC,MAAA;UACAnD,QAAA,OAAAA,QAAA;UACAwC,QAAA,OAAAA,QAAA;QACA;MACA,GAAAT,IAAA,CAAAC,GAAA;QACA,KAAAa,SAAA,GAAAb,GAAA,CAAAlC,IAAA;QACA,KAAA+C,SAAA,CAAAO,OAAA,CAAAC,IAAA;UACA,KAAA5B,IAAA,CAAA4B,IAAA;QACA;MACA;;MAEA,KAAAxB,QAAA,CAAAqB,GAAA;QACAC,MAAA;UAAAX,QAAA,OAAAA,QAAA;QAAA;MACA,GAAAT,IAAA,CAAAC,GAAA;QACA,KAAAsB,OAAA,GAAAtB,GAAA,CAAAlC,IAAA;MAEA;IACA;IACAyD,kBAAAvB,GAAA;MACA,IAAAA,GAAA,CAAAC,IAAA;QACA,KAAAC,QAAA,CAAAC,OAAA;QACA,KAAAC,IAAA;MACA;QACA,KAAAF,QAAA,CAAAG,KAAA;MACA;IACA;IACAmB,IAAAxC,EAAA;MAAA;MACA,KAAAyC,QAAA;QAAAR,IAAA;MAAA,GAAAlB,IAAA,CAAA2B,QAAA;QACA,KAAA7B,QAAA,CAAA8B,MAAA,uBAAA3C,EAAA,EAAAe,IAAA,CAAAC,GAAA;UACA,IAAAA,GAAA,CAAAC,IAAA;YAAA;YACA,KAAAC,QAAA,CAAAC,OAAA;YACA,KAAAC,IAAA;UACA;YACA,KAAAF,QAAA,CAAAG,KAAA,CAAAL,GAAA,CAAAM,GAAA;UACA;QACA;MACA,GAAAsB,KAAA,QACA;IACA;IACAC,sBAAAC,IAAA;MAAA;MACA,KAAAC,GAAA,GAAAD,IAAA,CAAAE,GAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAjD,EAAA;IACA;;IACAkD,SAAA;MAAA;MACA,UAAAH,GAAA,CAAAI,MAAA;QACA,KAAAjC,QAAA,CAAAkC,OAAA;QACA;MACA;MACA,KAAAX,QAAA;QAAAR,IAAA;MAAA,GAAAlB,IAAA,CAAA2B,QAAA;QACA,KAAA7B,QAAA,CAAA8B,MAAA;UAAA7D,IAAA,OAAAiE;QAAA,GAAAhC,IAAA,CAAAC,GAAA;UACA,IAAAA,GAAA,CAAAC,IAAA;YAAA;YACA,KAAAC,QAAA,CAAAC,OAAA;YACA,KAAAC,IAAA;UACA;YACA,KAAAF,QAAA,CAAAG,KAAA,CAAAL,GAAA,CAAAM,GAAA;UACA;QACA;MACA,GAAAsB,KAAA,QACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}